/* ConnectionPoint_ps.cpp generated by WIDL Version 2.2.1 on 06-Dec-01 at 11:53:37 AM */

#define __WIDL_PROXY_STUB 0x0200
#include "dcomProxy.h"
#include "ConnectionPoint.h"
#include <string.h>

extern "C" int include_ConnectionPoint () {return 0;}

NdrTypeDesc StructDesc__GUID(NDRTYPES&);

NdrTypeDesc StructDesc__GUID(NDRTYPES&);

NdrTypeDesc StructDesc_tagCONNECTDATA (NDRTYPES& ndrtypes)
    {
    NdrMemberInfo m [] =
        {
        NDR_MEMBER(tagCONNECTDATA, pUnk, ndrtypes.interfaceptr_t (IID_IUnknown)),
        NDR_MEMBER(tagCONNECTDATA, dwCookie, ndrtypes.ulong_t ()),
        };

    return ndrtypes.struct_t (2, m);
    }

NdrTypeDesc StructDesc_tagCONNECTDATA(NDRTYPES&);

HRESULT STDMETHODCALLTYPE IConnectionPoint_GetConnectionInterface_vxproxy (IConnectionPoint* pThis, IID* piid)
    {
    RPC_PROXY_MSG	msg (IID_IConnectionPoint, RpcMode::OBJECT, 3, pThis);
    NDRTYPES		ndrtypes;
    HRESULT		hrMethod;
    HRESULT		hr;

    hr = msg.SendReceive (); if (FAILED (hr)) return hr;
    NdrUnmarshalStream* pus = msg.unmarshalStreamGet ();
    hr=widlUnmarshal (&piid, pus, ndrtypes.refptr_t(StructDesc__GUID (ndrtypes))); if (FAILED(hr)) return hr;
    hr = widlUnmarshal (&hrMethod, pus, ndrtypes.hresult_t());
    if (FAILED(hr))
        return hr;
    return hrMethod;
    }

HRESULT STDMETHODCALLTYPE IConnectionPoint_GetConnectionInterface_vxstub (IConnectionPoint* pitf, RPC_STUB_MSG& msg)
    {
    NDRTYPES	ndrtypes;
    HRESULT	hr;
    HRESULT	hrMethod;
    IID piid_tmp;
    IID* piid = &piid_tmp;
    hrMethod = pitf->GetConnectionInterface (piid);

    NdrMarshalStream* pms = msg.marshalStreamGet ();
    hr=widlMarshal (&piid, pms, ndrtypes.refptr_t(StructDesc__GUID (ndrtypes))); if (FAILED(hr)) return hr;
    hr = widlMarshal (&hrMethod, pms, ndrtypes.hresult_t());
    if (FAILED(hr))
        return hr;
    return S_OK;
    }

HRESULT STDMETHODCALLTYPE IConnectionPoint_GetConnectionPointContainer_vxproxy (IConnectionPoint* pThis, IConnectionPointContainer** ppCPC)
    {
    RPC_PROXY_MSG	msg (IID_IConnectionPoint, RpcMode::OBJECT, 4, pThis);
    NDRTYPES		ndrtypes;
    HRESULT		hrMethod;
    HRESULT		hr;

    hr = msg.SendReceive (); if (FAILED (hr)) return hr;
    NdrUnmarshalStream* pus = msg.unmarshalStreamGet ();
    hr=widlUnmarshal (&ppCPC, pus, ndrtypes.refptr_t(ndrtypes.interfaceptr_t (IID_IConnectionPointContainer))); if (FAILED(hr)) return hr;
    hr = widlUnmarshal (&hrMethod, pus, ndrtypes.hresult_t());
    if (FAILED(hr))
        return hr;
    return hrMethod;
    }

HRESULT STDMETHODCALLTYPE IConnectionPoint_GetConnectionPointContainer_vxstub (IConnectionPoint* pitf, RPC_STUB_MSG& msg)
    {
    NDRTYPES	ndrtypes;
    HRESULT	hr;
    HRESULT	hrMethod;
    IConnectionPointContainer* ppCPC_tmp = 0;
    IConnectionPointContainer** ppCPC = &ppCPC_tmp;
    hrMethod = pitf->GetConnectionPointContainer (ppCPC);

    NdrMarshalStream* pms = msg.marshalStreamGet ();
    hr=widlMarshal (&ppCPC, pms, ndrtypes.refptr_t(ndrtypes.interfaceptr_t (IID_IConnectionPointContainer))); if (FAILED(hr)) return hr;
    hr = widlMarshal (&hrMethod, pms, ndrtypes.hresult_t());
    if (FAILED(hr))
        return hr;
    if ((*ppCPC)) {((*ppCPC))->Release ();};
    return S_OK;
    }

HRESULT STDMETHODCALLTYPE IConnectionPoint_Advise_vxproxy (IConnectionPoint* pThis, IUnknown* pUnkSink, DWORD* pdwCookie)
    {
    RPC_PROXY_MSG	msg (IID_IConnectionPoint, RpcMode::OBJECT, 5, pThis);
    NDRTYPES		ndrtypes;
    HRESULT		hrMethod;
    HRESULT		hr;

    NdrMarshalStream* pms = msg.marshalStreamGet ();
    hr=widlMarshal (&pUnkSink, pms, ndrtypes.interfaceptr_t (IID_IUnknown)); if (FAILED(hr)) return hr;
    hr = msg.SendReceive (); if (FAILED (hr)) return hr;
    NdrUnmarshalStream* pus = msg.unmarshalStreamGet ();
    hr=widlUnmarshal (&pdwCookie, pus, ndrtypes.refptr_t(ndrtypes.ulong_t ())); if (FAILED(hr)) return hr;
    hr = widlUnmarshal (&hrMethod, pus, ndrtypes.hresult_t());
    if (FAILED(hr))
        return hr;
    return hrMethod;
    }

HRESULT STDMETHODCALLTYPE IConnectionPoint_Advise_vxstub (IConnectionPoint* pitf, RPC_STUB_MSG& msg)
    {
    NDRTYPES	ndrtypes;
    HRESULT	hr;
    HRESULT	hrMethod;
    NdrUnmarshalStream* pus = msg.unmarshalStreamGet ();
    IUnknown* pUnkSink;
    hr=widlUnmarshal (&pUnkSink, pus, ndrtypes.interfaceptr_t (IID_IUnknown)); if (FAILED(hr)) return hr;
    DWORD pdwCookie_tmp;
    DWORD* pdwCookie = &pdwCookie_tmp;
    hrMethod = pitf->Advise (pUnkSink, pdwCookie);

    NdrMarshalStream* pms = msg.marshalStreamGet ();
    hr=widlMarshal (&pdwCookie, pms, ndrtypes.refptr_t(ndrtypes.ulong_t ())); if (FAILED(hr)) return hr;
    hr = widlMarshal (&hrMethod, pms, ndrtypes.hresult_t());
    if (FAILED(hr))
        return hr;
    (pUnkSink)->Release ();;
    return S_OK;
    }

HRESULT STDMETHODCALLTYPE IConnectionPoint_Unadvise_vxproxy (IConnectionPoint* pThis, DWORD dwCookie)
    {
    RPC_PROXY_MSG	msg (IID_IConnectionPoint, RpcMode::OBJECT, 6, pThis);
    NDRTYPES		ndrtypes;
    HRESULT		hrMethod;
    HRESULT		hr;

    NdrMarshalStream* pms = msg.marshalStreamGet ();
    hr=widlMarshal (&dwCookie, pms, ndrtypes.ulong_t ()); if (FAILED(hr)) return hr;
    hr = msg.SendReceive (); if (FAILED (hr)) return hr;
    NdrUnmarshalStream* pus = msg.unmarshalStreamGet ();
    hr = widlUnmarshal (&hrMethod, pus, ndrtypes.hresult_t());
    if (FAILED(hr))
        return hr;
    return hrMethod;
    }

HRESULT STDMETHODCALLTYPE IConnectionPoint_Unadvise_vxstub (IConnectionPoint* pitf, RPC_STUB_MSG& msg)
    {
    NDRTYPES	ndrtypes;
    HRESULT	hr;
    HRESULT	hrMethod;
    NdrUnmarshalStream* pus = msg.unmarshalStreamGet ();
    DWORD dwCookie;
    hr=widlUnmarshal (&dwCookie, pus, ndrtypes.ulong_t ()); if (FAILED(hr)) return hr;
    hrMethod = pitf->Unadvise (dwCookie);

    NdrMarshalStream* pms = msg.marshalStreamGet ();
    hr = widlMarshal (&hrMethod, pms, ndrtypes.hresult_t());
    if (FAILED(hr))
        return hr;
    return S_OK;
    }

HRESULT STDMETHODCALLTYPE IConnectionPoint_EnumConnections_vxproxy (IConnectionPoint* pThis, IEnumConnections** ppEnum)
    {
    RPC_PROXY_MSG	msg (IID_IConnectionPoint, RpcMode::OBJECT, 7, pThis);
    NDRTYPES		ndrtypes;
    HRESULT		hrMethod;
    HRESULT		hr;

    hr = msg.SendReceive (); if (FAILED (hr)) return hr;
    NdrUnmarshalStream* pus = msg.unmarshalStreamGet ();
    hr=widlUnmarshal (&ppEnum, pus, ndrtypes.refptr_t(ndrtypes.interfaceptr_t (IID_IEnumConnections))); if (FAILED(hr)) return hr;
    hr = widlUnmarshal (&hrMethod, pus, ndrtypes.hresult_t());
    if (FAILED(hr))
        return hr;
    return hrMethod;
    }

HRESULT STDMETHODCALLTYPE IConnectionPoint_EnumConnections_vxstub (IConnectionPoint* pitf, RPC_STUB_MSG& msg)
    {
    NDRTYPES	ndrtypes;
    HRESULT	hr;
    HRESULT	hrMethod;
    IEnumConnections* ppEnum_tmp = 0;
    IEnumConnections** ppEnum = &ppEnum_tmp;
    hrMethod = pitf->EnumConnections (ppEnum);

    NdrMarshalStream* pms = msg.marshalStreamGet ();
    hr=widlMarshal (&ppEnum, pms, ndrtypes.refptr_t(ndrtypes.interfaceptr_t (IID_IEnumConnections))); if (FAILED(hr)) return hr;
    hr = widlMarshal (&hrMethod, pms, ndrtypes.hresult_t());
    if (FAILED(hr))
        return hr;
    if ((*ppEnum)) {((*ppEnum))->Release ();};
    return S_OK;
    }

COM_VTABLE(IConnectionPoint) IConnectionPoint_vxproxy_vtbl = {
    COM_VTBL_HEADER
    COM_VTBL_METHOD(&IUnknown_QueryInterface_vxproxy),
    COM_VTBL_METHOD(&IUnknown_AddRef_vxproxy),
    COM_VTBL_METHOD(&IUnknown_Release_vxproxy),
    COM_VTBL_METHOD(&IConnectionPoint_GetConnectionInterface_vxproxy),
    COM_VTBL_METHOD(&IConnectionPoint_GetConnectionPointContainer_vxproxy),
    COM_VTBL_METHOD(&IConnectionPoint_Advise_vxproxy),
    COM_VTBL_METHOD(&IConnectionPoint_Unadvise_vxproxy),
    COM_VTBL_METHOD(&IConnectionPoint_EnumConnections_vxproxy),
    };

const PFN_ORPC_STUB stub_functbl_IConnectionPoint [] =
    {
    0,0,0,
    (PFN_ORPC_STUB) IConnectionPoint_GetConnectionInterface_vxstub,
    (PFN_ORPC_STUB) IConnectionPoint_GetConnectionPointContainer_vxstub,
    (PFN_ORPC_STUB) IConnectionPoint_Advise_vxstub,
    (PFN_ORPC_STUB) IConnectionPoint_Unadvise_vxstub,
    (PFN_ORPC_STUB) IConnectionPoint_EnumConnections_vxstub,
    };

EXTERN_C const VXDCOM_STUB_DISPTBL IConnectionPoint_vxstub_disptbl =
    {
    8,
    stub_functbl_IConnectionPoint
    };

VXDCOM_PS_AUTOREGISTER(IConnectionPoint);

HRESULT STDMETHODCALLTYPE IConnectionPointContainer_EnumConnectionPoints_vxproxy (IConnectionPointContainer* pThis, IEnumConnectionPoints** ppEnum)
    {
    RPC_PROXY_MSG	msg (IID_IConnectionPointContainer, RpcMode::OBJECT, 3, pThis);
    NDRTYPES		ndrtypes;
    HRESULT		hrMethod;
    HRESULT		hr;

    hr = msg.SendReceive (); if (FAILED (hr)) return hr;
    NdrUnmarshalStream* pus = msg.unmarshalStreamGet ();
    hr=widlUnmarshal (&ppEnum, pus, ndrtypes.refptr_t(ndrtypes.interfaceptr_t (IID_IEnumConnectionPoints))); if (FAILED(hr)) return hr;
    hr = widlUnmarshal (&hrMethod, pus, ndrtypes.hresult_t());
    if (FAILED(hr))
        return hr;
    return hrMethod;
    }

HRESULT STDMETHODCALLTYPE IConnectionPointContainer_EnumConnectionPoints_vxstub (IConnectionPointContainer* pitf, RPC_STUB_MSG& msg)
    {
    NDRTYPES	ndrtypes;
    HRESULT	hr;
    HRESULT	hrMethod;
    IEnumConnectionPoints* ppEnum_tmp = 0;
    IEnumConnectionPoints** ppEnum = &ppEnum_tmp;
    hrMethod = pitf->EnumConnectionPoints (ppEnum);

    NdrMarshalStream* pms = msg.marshalStreamGet ();
    hr=widlMarshal (&ppEnum, pms, ndrtypes.refptr_t(ndrtypes.interfaceptr_t (IID_IEnumConnectionPoints))); if (FAILED(hr)) return hr;
    hr = widlMarshal (&hrMethod, pms, ndrtypes.hresult_t());
    if (FAILED(hr))
        return hr;
    if ((*ppEnum)) {((*ppEnum))->Release ();};
    return S_OK;
    }

HRESULT STDMETHODCALLTYPE IConnectionPointContainer_FindConnectionPoint_vxproxy (IConnectionPointContainer* pThis, REFIID riid, IConnectionPoint** ppCP)
    {
    RPC_PROXY_MSG	msg (IID_IConnectionPointContainer, RpcMode::OBJECT, 4, pThis);
    NDRTYPES		ndrtypes;
    HRESULT		hrMethod;
    HRESULT		hr;

    NdrMarshalStream* pms = msg.marshalStreamGet ();
    hr=widlMarshal (&riid, pms, StructDesc__GUID (ndrtypes)); if (FAILED(hr)) return hr;
    hr = msg.SendReceive (); if (FAILED (hr)) return hr;
    NdrUnmarshalStream* pus = msg.unmarshalStreamGet ();
    hr=widlUnmarshal (&ppCP, pus, ndrtypes.refptr_t(ndrtypes.interfaceptr_t (IID_IConnectionPoint))); if (FAILED(hr)) return hr;
    hr = widlUnmarshal (&hrMethod, pus, ndrtypes.hresult_t());
    if (FAILED(hr))
        return hr;
    return hrMethod;
    }

HRESULT STDMETHODCALLTYPE IConnectionPointContainer_FindConnectionPoint_vxstub (IConnectionPointContainer* pitf, RPC_STUB_MSG& msg)
    {
    NDRTYPES	ndrtypes;
    HRESULT	hr;
    HRESULT	hrMethod;
    NdrUnmarshalStream* pus = msg.unmarshalStreamGet ();
    IID riid;
    hr=widlUnmarshal (&riid, pus, StructDesc__GUID (ndrtypes)); if (FAILED(hr)) return hr;
    IConnectionPoint* ppCP_tmp = 0;
    IConnectionPoint** ppCP = &ppCP_tmp;
    hrMethod = pitf->FindConnectionPoint (riid, ppCP);

    NdrMarshalStream* pms = msg.marshalStreamGet ();
    hr=widlMarshal (&ppCP, pms, ndrtypes.refptr_t(ndrtypes.interfaceptr_t (IID_IConnectionPoint))); if (FAILED(hr)) return hr;
    hr = widlMarshal (&hrMethod, pms, ndrtypes.hresult_t());
    if (FAILED(hr))
        return hr;
    if ((*ppCP)) {((*ppCP))->Release ();};
    return S_OK;
    }

COM_VTABLE(IConnectionPointContainer) IConnectionPointContainer_vxproxy_vtbl = {
    COM_VTBL_HEADER
    COM_VTBL_METHOD(&IUnknown_QueryInterface_vxproxy),
    COM_VTBL_METHOD(&IUnknown_AddRef_vxproxy),
    COM_VTBL_METHOD(&IUnknown_Release_vxproxy),
    COM_VTBL_METHOD(&IConnectionPointContainer_EnumConnectionPoints_vxproxy),
    COM_VTBL_METHOD(&IConnectionPointContainer_FindConnectionPoint_vxproxy),
    };

const PFN_ORPC_STUB stub_functbl_IConnectionPointContainer [] =
    {
    0,0,0,
    (PFN_ORPC_STUB) IConnectionPointContainer_EnumConnectionPoints_vxstub,
    (PFN_ORPC_STUB) IConnectionPointContainer_FindConnectionPoint_vxstub,
    };

EXTERN_C const VXDCOM_STUB_DISPTBL IConnectionPointContainer_vxstub_disptbl =
    {
    5,
    stub_functbl_IConnectionPointContainer
    };

VXDCOM_PS_AUTOREGISTER(IConnectionPointContainer);

HRESULT STDMETHODCALLTYPE IEnumConnections_Next_vxproxy (IEnumConnections* pThis, ULONG cConnections, CONNECTDATA* rgcd, ULONG* lpcFetched)
    {
    RPC_PROXY_MSG	msg (IID_IEnumConnections, RpcMode::OBJECT, 3, pThis);
    NDRTYPES		ndrtypes;
    HRESULT		hrMethod;
    HRESULT		hr;

    NdrMarshalStream* pms = msg.marshalStreamGet ();
    hr=widlMarshal (&cConnections, pms, ndrtypes.ulong_t ()); if (FAILED(hr)) return hr;
    hr = msg.SendReceive (); if (FAILED (hr)) return hr;
    NdrUnmarshalStream* pus = msg.unmarshalStreamGet ();
    hr=widlUnmarshal (&rgcd, pus, ndrtypes.refptr_t(ndrtypes.cvarray_t(StructDesc_tagCONNECTDATA (ndrtypes), NDR_SIZEOF(CONNECTDATA)))); if (FAILED(hr)) return hr;
    hr=widlUnmarshal (&lpcFetched, pus, ndrtypes.refptr_t(ndrtypes.ulong_t ())); if (FAILED(hr)) return hr;
    hr = widlUnmarshal (&hrMethod, pus, ndrtypes.hresult_t());
    if (FAILED(hr))
        return hr;
    return hrMethod;
    }

HRESULT STDMETHODCALLTYPE IEnumConnections_Next_vxstub (IEnumConnections* pitf, RPC_STUB_MSG& msg)
    {
    NDRTYPES	ndrtypes;
    HRESULT	hr;
    HRESULT	hrMethod;
    NdrUnmarshalStream* pus = msg.unmarshalStreamGet ();
    ULONG cConnections;
    hr=widlUnmarshal (&cConnections, pus, ndrtypes.ulong_t ()); if (FAILED(hr)) return hr;
    CONNECTDATA* rgcd = (CONNECTDATA*) CoTaskMemAlloc (NDR_SIZEOF(CONNECTDATA) * cConnections);
    ULONG lpcFetched_tmp;
    ULONG* lpcFetched = &lpcFetched_tmp;
    hrMethod = pitf->Next (cConnections, rgcd, lpcFetched);

    NdrMarshalStream* pms = msg.marshalStreamGet ();
    hr=widlMarshal (&rgcd, pms, ndrtypes.refptr_t(ndrtypes.cvarray_t(StructDesc_tagCONNECTDATA (ndrtypes), NDR_SIZEOF(CONNECTDATA), *lpcFetched, cConnections))); if (FAILED(hr)) return hr;
    hr=widlMarshal (&lpcFetched, pms, ndrtypes.refptr_t(ndrtypes.ulong_t ())); if (FAILED(hr)) return hr;
    hr = widlMarshal (&hrMethod, pms, ndrtypes.hresult_t());
    if (FAILED(hr))
        return hr;
    {for (DWORD __ix=0; __ix < *lpcFetched; ++__ix) {if ((rgcd[__ix]).pUnk) {((rgcd[__ix]).pUnk)->Release ();}}};
    CoTaskMemFree (rgcd);
    return S_OK;
    }

HRESULT STDMETHODCALLTYPE IEnumConnections_Skip_vxproxy (IEnumConnections* pThis, ULONG cConnections)
    {
    RPC_PROXY_MSG	msg (IID_IEnumConnections, RpcMode::OBJECT, 4, pThis);
    NDRTYPES		ndrtypes;
    HRESULT		hrMethod;
    HRESULT		hr;

    NdrMarshalStream* pms = msg.marshalStreamGet ();
    hr=widlMarshal (&cConnections, pms, ndrtypes.ulong_t ()); if (FAILED(hr)) return hr;
    hr = msg.SendReceive (); if (FAILED (hr)) return hr;
    NdrUnmarshalStream* pus = msg.unmarshalStreamGet ();
    hr = widlUnmarshal (&hrMethod, pus, ndrtypes.hresult_t());
    if (FAILED(hr))
        return hr;
    return hrMethod;
    }

HRESULT STDMETHODCALLTYPE IEnumConnections_Skip_vxstub (IEnumConnections* pitf, RPC_STUB_MSG& msg)
    {
    NDRTYPES	ndrtypes;
    HRESULT	hr;
    HRESULT	hrMethod;
    NdrUnmarshalStream* pus = msg.unmarshalStreamGet ();
    ULONG cConnections;
    hr=widlUnmarshal (&cConnections, pus, ndrtypes.ulong_t ()); if (FAILED(hr)) return hr;
    hrMethod = pitf->Skip (cConnections);

    NdrMarshalStream* pms = msg.marshalStreamGet ();
    hr = widlMarshal (&hrMethod, pms, ndrtypes.hresult_t());
    if (FAILED(hr))
        return hr;
    return S_OK;
    }

HRESULT STDMETHODCALLTYPE IEnumConnections_Reset_vxproxy (IEnumConnections* pThis)
    {
    RPC_PROXY_MSG	msg (IID_IEnumConnections, RpcMode::OBJECT, 5, pThis);
    NDRTYPES		ndrtypes;
    HRESULT		hrMethod;
    HRESULT		hr;

    hr = msg.SendReceive (); if (FAILED (hr)) return hr;
    NdrUnmarshalStream* pus = msg.unmarshalStreamGet ();
    hr = widlUnmarshal (&hrMethod, pus, ndrtypes.hresult_t());
    if (FAILED(hr))
        return hr;
    return hrMethod;
    }

HRESULT STDMETHODCALLTYPE IEnumConnections_Reset_vxstub (IEnumConnections* pitf, RPC_STUB_MSG& msg)
    {
    NDRTYPES	ndrtypes;
    HRESULT	hr;
    HRESULT	hrMethod;
    hrMethod = pitf->Reset ();

    NdrMarshalStream* pms = msg.marshalStreamGet ();
    hr = widlMarshal (&hrMethod, pms, ndrtypes.hresult_t());
    if (FAILED(hr))
        return hr;
    return S_OK;
    }

HRESULT STDMETHODCALLTYPE IEnumConnections_Clone_vxproxy (IEnumConnections* pThis, IEnumConnections** ppEnum)
    {
    RPC_PROXY_MSG	msg (IID_IEnumConnections, RpcMode::OBJECT, 6, pThis);
    NDRTYPES		ndrtypes;
    HRESULT		hrMethod;
    HRESULT		hr;

    hr = msg.SendReceive (); if (FAILED (hr)) return hr;
    NdrUnmarshalStream* pus = msg.unmarshalStreamGet ();
    hr=widlUnmarshal (&ppEnum, pus, ndrtypes.refptr_t(ndrtypes.interfaceptr_t (IID_IEnumConnections))); if (FAILED(hr)) return hr;
    hr = widlUnmarshal (&hrMethod, pus, ndrtypes.hresult_t());
    if (FAILED(hr))
        return hr;
    return hrMethod;
    }

HRESULT STDMETHODCALLTYPE IEnumConnections_Clone_vxstub (IEnumConnections* pitf, RPC_STUB_MSG& msg)
    {
    NDRTYPES	ndrtypes;
    HRESULT	hr;
    HRESULT	hrMethod;
    IEnumConnections* ppEnum_tmp = 0;
    IEnumConnections** ppEnum = &ppEnum_tmp;
    hrMethod = pitf->Clone (ppEnum);

    NdrMarshalStream* pms = msg.marshalStreamGet ();
    hr=widlMarshal (&ppEnum, pms, ndrtypes.refptr_t(ndrtypes.interfaceptr_t (IID_IEnumConnections))); if (FAILED(hr)) return hr;
    hr = widlMarshal (&hrMethod, pms, ndrtypes.hresult_t());
    if (FAILED(hr))
        return hr;
    if ((*ppEnum)) {((*ppEnum))->Release ();};
    return S_OK;
    }

COM_VTABLE(IEnumConnections) IEnumConnections_vxproxy_vtbl = {
    COM_VTBL_HEADER
    COM_VTBL_METHOD(&IUnknown_QueryInterface_vxproxy),
    COM_VTBL_METHOD(&IUnknown_AddRef_vxproxy),
    COM_VTBL_METHOD(&IUnknown_Release_vxproxy),
    COM_VTBL_METHOD(&IEnumConnections_Next_vxproxy),
    COM_VTBL_METHOD(&IEnumConnections_Skip_vxproxy),
    COM_VTBL_METHOD(&IEnumConnections_Reset_vxproxy),
    COM_VTBL_METHOD(&IEnumConnections_Clone_vxproxy),
    };

const PFN_ORPC_STUB stub_functbl_IEnumConnections [] =
    {
    0,0,0,
    (PFN_ORPC_STUB) IEnumConnections_Next_vxstub,
    (PFN_ORPC_STUB) IEnumConnections_Skip_vxstub,
    (PFN_ORPC_STUB) IEnumConnections_Reset_vxstub,
    (PFN_ORPC_STUB) IEnumConnections_Clone_vxstub,
    };

EXTERN_C const VXDCOM_STUB_DISPTBL IEnumConnections_vxstub_disptbl =
    {
    7,
    stub_functbl_IEnumConnections
    };

VXDCOM_PS_AUTOREGISTER(IEnumConnections);

HRESULT STDMETHODCALLTYPE IEnumConnectionPoints_Next_vxproxy (IEnumConnectionPoints* pThis, ULONG cConnections, IConnectionPoint** rgpcn, ULONG* lpcFetched)
    {
    RPC_PROXY_MSG	msg (IID_IEnumConnectionPoints, RpcMode::OBJECT, 3, pThis);
    NDRTYPES		ndrtypes;
    HRESULT		hrMethod;
    HRESULT		hr;

    NdrMarshalStream* pms = msg.marshalStreamGet ();
    hr=widlMarshal (&cConnections, pms, ndrtypes.ulong_t ()); if (FAILED(hr)) return hr;
    hr = msg.SendReceive (); if (FAILED (hr)) return hr;
    NdrUnmarshalStream* pus = msg.unmarshalStreamGet ();
    hr=widlUnmarshal (&rgpcn, pus, ndrtypes.refptr_t(ndrtypes.cvarray_t(ndrtypes.interfaceptr_t (IID_IConnectionPoint), NDR_SIZEOF(IConnectionPoint*)))); if (FAILED(hr)) return hr;
    hr=widlUnmarshal (&lpcFetched, pus, ndrtypes.refptr_t(ndrtypes.ulong_t ())); if (FAILED(hr)) return hr;
    hr = widlUnmarshal (&hrMethod, pus, ndrtypes.hresult_t());
    if (FAILED(hr))
        return hr;
    return hrMethod;
    }

HRESULT STDMETHODCALLTYPE IEnumConnectionPoints_Next_vxstub (IEnumConnectionPoints* pitf, RPC_STUB_MSG& msg)
    {
    NDRTYPES	ndrtypes;
    HRESULT	hr;
    HRESULT	hrMethod;
    NdrUnmarshalStream* pus = msg.unmarshalStreamGet ();
    ULONG cConnections;
    hr=widlUnmarshal (&cConnections, pus, ndrtypes.ulong_t ()); if (FAILED(hr)) return hr;
    IConnectionPoint** rgpcn = (IConnectionPoint**) CoTaskMemAlloc (NDR_SIZEOF(IConnectionPoint*) * cConnections);
    ULONG lpcFetched_tmp;
    ULONG* lpcFetched = &lpcFetched_tmp;
    hrMethod = pitf->Next (cConnections, rgpcn, lpcFetched);

    NdrMarshalStream* pms = msg.marshalStreamGet ();
    hr=widlMarshal (&rgpcn, pms, ndrtypes.refptr_t(ndrtypes.cvarray_t(ndrtypes.interfaceptr_t (IID_IConnectionPoint), NDR_SIZEOF(IConnectionPoint*), *lpcFetched, cConnections))); if (FAILED(hr)) return hr;
    hr=widlMarshal (&lpcFetched, pms, ndrtypes.refptr_t(ndrtypes.ulong_t ())); if (FAILED(hr)) return hr;
    hr = widlMarshal (&hrMethod, pms, ndrtypes.hresult_t());
    if (FAILED(hr))
        return hr;
    {for (DWORD __ix=0; __ix < *lpcFetched; ++__ix) {if ((rgpcn[__ix])) {((rgpcn[__ix]))->Release ();}}};
    CoTaskMemFree (rgpcn);
    return S_OK;
    }

HRESULT STDMETHODCALLTYPE IEnumConnectionPoints_Skip_vxproxy (IEnumConnectionPoints* pThis, ULONG cConnections)
    {
    RPC_PROXY_MSG	msg (IID_IEnumConnectionPoints, RpcMode::OBJECT, 4, pThis);
    NDRTYPES		ndrtypes;
    HRESULT		hrMethod;
    HRESULT		hr;

    NdrMarshalStream* pms = msg.marshalStreamGet ();
    hr=widlMarshal (&cConnections, pms, ndrtypes.ulong_t ()); if (FAILED(hr)) return hr;
    hr = msg.SendReceive (); if (FAILED (hr)) return hr;
    NdrUnmarshalStream* pus = msg.unmarshalStreamGet ();
    hr = widlUnmarshal (&hrMethod, pus, ndrtypes.hresult_t());
    if (FAILED(hr))
        return hr;
    return hrMethod;
    }

HRESULT STDMETHODCALLTYPE IEnumConnectionPoints_Skip_vxstub (IEnumConnectionPoints* pitf, RPC_STUB_MSG& msg)
    {
    NDRTYPES	ndrtypes;
    HRESULT	hr;
    HRESULT	hrMethod;
    NdrUnmarshalStream* pus = msg.unmarshalStreamGet ();
    ULONG cConnections;
    hr=widlUnmarshal (&cConnections, pus, ndrtypes.ulong_t ()); if (FAILED(hr)) return hr;
    hrMethod = pitf->Skip (cConnections);

    NdrMarshalStream* pms = msg.marshalStreamGet ();
    hr = widlMarshal (&hrMethod, pms, ndrtypes.hresult_t());
    if (FAILED(hr))
        return hr;
    return S_OK;
    }

HRESULT STDMETHODCALLTYPE IEnumConnectionPoints_Reset_vxproxy (IEnumConnectionPoints* pThis)
    {
    RPC_PROXY_MSG	msg (IID_IEnumConnectionPoints, RpcMode::OBJECT, 5, pThis);
    NDRTYPES		ndrtypes;
    HRESULT		hrMethod;
    HRESULT		hr;

    hr = msg.SendReceive (); if (FAILED (hr)) return hr;
    NdrUnmarshalStream* pus = msg.unmarshalStreamGet ();
    hr = widlUnmarshal (&hrMethod, pus, ndrtypes.hresult_t());
    if (FAILED(hr))
        return hr;
    return hrMethod;
    }

HRESULT STDMETHODCALLTYPE IEnumConnectionPoints_Reset_vxstub (IEnumConnectionPoints* pitf, RPC_STUB_MSG& msg)
    {
    NDRTYPES	ndrtypes;
    HRESULT	hr;
    HRESULT	hrMethod;
    hrMethod = pitf->Reset ();

    NdrMarshalStream* pms = msg.marshalStreamGet ();
    hr = widlMarshal (&hrMethod, pms, ndrtypes.hresult_t());
    if (FAILED(hr))
        return hr;
    return S_OK;
    }

HRESULT STDMETHODCALLTYPE IEnumConnectionPoints_Clone_vxproxy (IEnumConnectionPoints* pThis, IEnumConnectionPoints** ppEnum)
    {
    RPC_PROXY_MSG	msg (IID_IEnumConnectionPoints, RpcMode::OBJECT, 6, pThis);
    NDRTYPES		ndrtypes;
    HRESULT		hrMethod;
    HRESULT		hr;

    hr = msg.SendReceive (); if (FAILED (hr)) return hr;
    NdrUnmarshalStream* pus = msg.unmarshalStreamGet ();
    hr=widlUnmarshal (&ppEnum, pus, ndrtypes.refptr_t(ndrtypes.interfaceptr_t (IID_IEnumConnectionPoints))); if (FAILED(hr)) return hr;
    hr = widlUnmarshal (&hrMethod, pus, ndrtypes.hresult_t());
    if (FAILED(hr))
        return hr;
    return hrMethod;
    }

HRESULT STDMETHODCALLTYPE IEnumConnectionPoints_Clone_vxstub (IEnumConnectionPoints* pitf, RPC_STUB_MSG& msg)
    {
    NDRTYPES	ndrtypes;
    HRESULT	hr;
    HRESULT	hrMethod;
    IEnumConnectionPoints* ppEnum_tmp = 0;
    IEnumConnectionPoints** ppEnum = &ppEnum_tmp;
    hrMethod = pitf->Clone (ppEnum);

    NdrMarshalStream* pms = msg.marshalStreamGet ();
    hr=widlMarshal (&ppEnum, pms, ndrtypes.refptr_t(ndrtypes.interfaceptr_t (IID_IEnumConnectionPoints))); if (FAILED(hr)) return hr;
    hr = widlMarshal (&hrMethod, pms, ndrtypes.hresult_t());
    if (FAILED(hr))
        return hr;
    if ((*ppEnum)) {((*ppEnum))->Release ();};
    return S_OK;
    }

COM_VTABLE(IEnumConnectionPoints) IEnumConnectionPoints_vxproxy_vtbl = {
    COM_VTBL_HEADER
    COM_VTBL_METHOD(&IUnknown_QueryInterface_vxproxy),
    COM_VTBL_METHOD(&IUnknown_AddRef_vxproxy),
    COM_VTBL_METHOD(&IUnknown_Release_vxproxy),
    COM_VTBL_METHOD(&IEnumConnectionPoints_Next_vxproxy),
    COM_VTBL_METHOD(&IEnumConnectionPoints_Skip_vxproxy),
    COM_VTBL_METHOD(&IEnumConnectionPoints_Reset_vxproxy),
    COM_VTBL_METHOD(&IEnumConnectionPoints_Clone_vxproxy),
    };

const PFN_ORPC_STUB stub_functbl_IEnumConnectionPoints [] =
    {
    0,0,0,
    (PFN_ORPC_STUB) IEnumConnectionPoints_Next_vxstub,
    (PFN_ORPC_STUB) IEnumConnectionPoints_Skip_vxstub,
    (PFN_ORPC_STUB) IEnumConnectionPoints_Reset_vxstub,
    (PFN_ORPC_STUB) IEnumConnectionPoints_Clone_vxstub,
    };

EXTERN_C const VXDCOM_STUB_DISPTBL IEnumConnectionPoints_vxstub_disptbl =
    {
    7,
    stub_functbl_IEnumConnectionPoints
    };

VXDCOM_PS_AUTOREGISTER(IEnumConnectionPoints);



