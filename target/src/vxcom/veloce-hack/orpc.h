/* orpc.h generated by WIDL Version 2.2.1 on 06-Dec-01 at 11:54:08 AM */

#include "comBase.h"

#ifndef __INCorpc_h
#define __INCorpc_h


#include "vxidl.h"

#ifdef __cplusplus
extern "C" {
#endif

int include_orpc (void);

#ifndef __ORPCTypes_FWD_DEFINED__
#define __ORPCTypes_FWD_DEFINED__
typedef interface ORPCTypes ORPCTypes;
#endif /* __ORPCTypes_FWD_DEFINED__ */

#ifndef __IOrpcProxy_FWD_DEFINED__
#define __IOrpcProxy_FWD_DEFINED__
typedef interface IOrpcProxy IOrpcProxy;
#endif /* __IOrpcProxy_FWD_DEFINED__ */

#ifndef __IOrpcClientChannel_FWD_DEFINED__
#define __IOrpcClientChannel_FWD_DEFINED__
typedef interface IOrpcClientChannel IOrpcClientChannel;
#endif /* __IOrpcClientChannel_FWD_DEFINED__ */

/* Copyright (c) 2000 Wind River Systems, Inc. */
typedef hyper ID;

typedef ID MID;

typedef ID OXID;

typedef ID OID;

typedef ID SETID;

typedef GUID IPID;

typedef GUID CID;

enum tagCOM_VERSION_LEVEL
{
COM_MINOR_VERSION_1 = 1,
COM_MINOR_VERSION_2 = 2,
COM_MINOR_VERSION = 3,
COM_MAJOR_VERSION = 5,
};

typedef enum tagCOM_VERSION_LEVEL COM_VERSION_LEVEL;

struct tagCOMVERSION
{
unsigned short MajorVersion;
unsigned short MinorVersion;
};

typedef struct tagCOMVERSION COMVERSION;

enum tagORPC_FLAGS
{
ORPCF_NULL = 0,
ORPCF_LOCAL = 1,
ORPCF_RESERVED1 = 2,
ORPCF_RESERVED2 = 4,
ORPCF_RESERVED3 = 8,
ORPCF_RESERVED4 = 16,
};

typedef enum tagORPC_FLAGS ORPC_FLAGS;

struct tagORPC_EXTENT
{
GUID id;
unsigned long size;
byte data[1];
};

typedef struct tagORPC_EXTENT ORPC_EXTENT;

struct tagORPC_EXTENT_ARRAY
{
unsigned long size;
unsigned long reserved;
ORPC_EXTENT** extent;
};

typedef struct tagORPC_EXTENT_ARRAY ORPC_EXTENT_ARRAY;

struct tagORPCTHIS
{
COMVERSION version;
unsigned long flags;
unsigned long reserved1;
CID causality;
ORPC_EXTENT_ARRAY* extensions;
};

typedef struct tagORPCTHIS ORPCTHIS;

struct tagORPCTHAT
{
unsigned long flags;
ORPC_EXTENT_ARRAY* extensions;
};

typedef struct tagORPCTHAT ORPCTHAT;

enum tagPROTSEQ_VALUE
{
NCADG_IP_UDP = 8,
NCACN_IP_TCP = 7,
NCADG_IPX = 14,
NCACN_SPX = 12,
NCACN_NB_NB = 18,
NCACN_NB_IPX = 13,
NCACN_DNET_NSP = 4,
NCACN_HTTP = 31,
};

typedef enum tagPROTSEQ_VALUE PROTSEQ_VALUE;

struct tagSTRINGBINDING
{
unsigned short wTowerId;
unsigned short aNetworkAddr;
};

typedef struct tagSTRINGBINDING STRINGBINDING;

enum tagCOM_AUTHZ
{
COM_C_AUTHZ_NONE = 65535,
};

typedef enum tagCOM_AUTHZ COM_AUTHZ;

struct tagSECURITYBINDING
{
unsigned short wAuthnSvc;
unsigned short wAuthzSvc;
unsigned short aPrincName;
};

typedef struct tagSECURITYBINDING SECURITYBINDING;

struct tagDUALSTRINGARRAY
{
unsigned short wNumEntries;
unsigned short wSecurityOffset;
unsigned short aStringArray[1];
};

typedef struct tagDUALSTRINGARRAY DUALSTRINGARRAY;

enum tagOBJREF_FLAGS
{
OBJREF_SIGNATURE = 1464812877,
OBJREF_STANDARD = 1,
OBJREF_HANDLER = 2,
OBJREF_CUSTOM = 4,
};

typedef enum tagOBJREF_FLAGS OBJREF_FLAGS;

enum tagSTDOBJREF_FLAGS
{
SORF_NULL = 0,
SORF_OXRES1 = 1,
SORF_OXRES2 = 32,
SORF_OXRES3 = 64,
SORF_OXRES4 = 128,
SORF_OXRES5 = 256,
SORF_OXRES6 = 512,
SORF_OXRES7 = 1024,
SORF_OXRES8 = 2048,
SORF_NOPING = 4096,
};

typedef enum tagSTDOBJREF_FLAGS STDOBJREF_FLAGS;

struct tagSTDOBJREF
{
unsigned long flags;
unsigned long cPublicRefs;
OXID oxid;
OID oid;
IPID ipid;
};

typedef struct tagSTDOBJREF STDOBJREF;

typedef struct tagOBJREF OBJREF;
struct tagMInterfacePointer
{
ULONG ulCntData;
BYTE abData[1];
};

typedef struct tagMInterfacePointer MInterfacePointer;

typedef MInterfacePointer* PMInterfacePointer;

struct tagMSHL_BUFFER
{
byte* buf;
ULONG len;
ULONG drep;
};

typedef struct tagMSHL_BUFFER MSHL_BUFFER;

typedef struct
    {
    COM_VTBL_BEGIN
    COM_VTBL_END
    } ORPCTypesVtbl;

#ifdef __cplusplus

interface ORPCTypes {};

#else

/* C interface definition for ORPCTypes */

interface ORPCTypes
    {
    const ORPCTypesVtbl *  lpVtbl;
    };

#endif /* __cplusplus */

EXTERN_C const IID IID_ORPCTypes;

typedef struct
    {
    COM_VTBL_BEGIN
    COM_VTBL_ENTRY (HRESULT, QueryInterface, (IUnknown* pThis, REFIID riid, void** ppvObject));

#define IUnknown_QueryInterface(pThis, riid, ppvObject) pThis->lpVtbl->QueryInterface(COM_ADJUST_THIS(pThis), riid, ppvObject)

    COM_VTBL_ENTRY (ULONG, AddRef, (IUnknown* pThis));

#define IUnknown_AddRef(pThis) pThis->lpVtbl->AddRef(COM_ADJUST_THIS(pThis))

    COM_VTBL_ENTRY (ULONG, Release, (IUnknown* pThis));

#define IUnknown_Release(pThis) pThis->lpVtbl->Release(COM_ADJUST_THIS(pThis))

    COM_VTBL_ENTRY (HRESULT, Connect, (IOrpcProxy* pThis, IOrpcClientChannel* pChannel));

#define IOrpcProxy_Connect(pThis, pChannel) pThis->lpVtbl->Connect(COM_ADJUST_THIS(pThis), pChannel)

    COM_VTBL_ENTRY (HRESULT, Disconnect, (IOrpcProxy* pThis));

#define IOrpcProxy_Disconnect(pThis) pThis->lpVtbl->Disconnect(COM_ADJUST_THIS(pThis))

    COM_VTBL_END
    } IOrpcProxyVtbl;

#ifdef __cplusplus

interface IOrpcProxy : public IUnknown
{
virtual HRESULT Connect (IOrpcClientChannel* pChannel) =0;

virtual HRESULT Disconnect () =0;

};

#else

/* C interface definition for IOrpcProxy */

interface IOrpcProxy
    {
    const IOrpcProxyVtbl *  lpVtbl;
    };

#endif /* __cplusplus */

EXTERN_C const IID IID_IOrpcProxy;

typedef struct
    {
    COM_VTBL_BEGIN
    COM_VTBL_ENTRY (HRESULT, QueryInterface, (IUnknown* pThis, REFIID riid, void** ppvObject));

#define IUnknown_QueryInterface(pThis, riid, ppvObject) pThis->lpVtbl->QueryInterface(COM_ADJUST_THIS(pThis), riid, ppvObject)

    COM_VTBL_ENTRY (ULONG, AddRef, (IUnknown* pThis));

#define IUnknown_AddRef(pThis) pThis->lpVtbl->AddRef(COM_ADJUST_THIS(pThis))

    COM_VTBL_ENTRY (ULONG, Release, (IUnknown* pThis));

#define IUnknown_Release(pThis) pThis->lpVtbl->Release(COM_ADJUST_THIS(pThis))

    COM_VTBL_ENTRY (HRESULT, InvokeMethod, (IOrpcClientChannel* pThis, REFIID iid, const IPID* pIpid, USHORT opnum, const MSHL_BUFFER* pMshlBufIn, MSHL_BUFFER* pMshlBufOut));

#define IOrpcClientChannel_InvokeMethod(pThis, iid, pIpid, opnum, pMshlBufIn, pMshlBufOut) pThis->lpVtbl->InvokeMethod(COM_ADJUST_THIS(pThis), iid, pIpid, opnum, pMshlBufIn, pMshlBufOut)

    COM_VTBL_ENTRY (HRESULT, AddKnownInterface, (IOrpcClientChannel* pThis, REFIID iid));

#define IOrpcClientChannel_AddKnownInterface(pThis, iid) pThis->lpVtbl->AddKnownInterface(COM_ADJUST_THIS(pThis), iid)

    COM_VTBL_ENTRY (HRESULT, AllocBuffer, (IOrpcClientChannel* pThis, MSHL_BUFFER* pBuf, DWORD nBytes));

#define IOrpcClientChannel_AllocBuffer(pThis, pBuf, nBytes) pThis->lpVtbl->AllocBuffer(COM_ADJUST_THIS(pThis), pBuf, nBytes)

    COM_VTBL_ENTRY (HRESULT, FreeBuffer, (IOrpcClientChannel* pThis, MSHL_BUFFER* pBuf));

#define IOrpcClientChannel_FreeBuffer(pThis, pBuf) pThis->lpVtbl->FreeBuffer(COM_ADJUST_THIS(pThis), pBuf)

    COM_VTBL_END
    } IOrpcClientChannelVtbl;

#ifdef __cplusplus

interface IOrpcClientChannel : public IUnknown
{
virtual HRESULT InvokeMethod (REFIID iid, const IPID* pIpid, USHORT opnum, const MSHL_BUFFER* pMshlBufIn, MSHL_BUFFER* pMshlBufOut) =0;

virtual HRESULT AddKnownInterface (REFIID iid) =0;

virtual HRESULT AllocBuffer (MSHL_BUFFER* pBuf, DWORD nBytes) =0;

virtual HRESULT FreeBuffer (MSHL_BUFFER* pBuf) =0;

};

#else

/* C interface definition for IOrpcClientChannel */

interface IOrpcClientChannel
    {
    const IOrpcClientChannelVtbl *  lpVtbl;
    };

#endif /* __cplusplus */

EXTERN_C const IID IID_IOrpcClientChannel;

#ifdef __cplusplus
}
#endif



#endif /* __INCorpc_h */


