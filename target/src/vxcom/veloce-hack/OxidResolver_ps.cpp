/* OxidResolver_ps.cpp generated by WIDL Version 2.2.1 on 06-Dec-01 at 11:54:48 AM */

#define __WIDL_PROXY_STUB 0x0200
#include "dcomProxy.h"
#include "OxidResolver.h"
#include <string.h>

extern "C" int include_OxidResolver () {return 0;}

NdrTypeDesc StructDesc_tagDUALSTRINGARRAY(NDRTYPES&);

NdrTypeDesc StructDesc__GUID(NDRTYPES&);

NdrTypeDesc StructDesc_tagDUALSTRINGARRAY(NDRTYPES&);

NdrTypeDesc StructDesc__GUID(NDRTYPES&);

NdrTypeDesc StructDesc_tagCOMVERSION(NDRTYPES&);

HRESULT STDMETHODCALLTYPE IOXIDResolver_ResolveOxid_vxproxy (void* pvRpcChannel, OXID* pOxid, unsigned short cRequestedProtseqs, unsigned short* arRequestedProtseqs, DUALSTRINGARRAY** ppdsaOxidBindings, IPID* pipidRemUnknown, DWORD* pAuthnHint)
    {
    RPC_PROXY_MSG	msg (IID_IOXIDResolver, RpcMode::DCE, 0, pvRpcChannel);
    NDRTYPES		ndrtypes;
    HRESULT		hrMethod;
    HRESULT		hr;

    NdrMarshalStream* pms = msg.marshalStreamGet ();
    hr=widlMarshal (&pOxid, pms, ndrtypes.refptr_t(ndrtypes.hyper_t ())); if (FAILED(hr)) return hr;
    hr=widlMarshal (&cRequestedProtseqs, pms, ndrtypes.ushort_t ()); if (FAILED(hr)) return hr;
    hr=widlMarshal (&arRequestedProtseqs, pms, ndrtypes.refptr_t(ndrtypes.carray_t(ndrtypes.ushort_t (), NDR_SIZEOF(unsigned short), cRequestedProtseqs))); if (FAILED(hr)) return hr;
    hr = msg.SendReceive (); if (FAILED (hr)) return hr;
    NdrUnmarshalStream* pus = msg.unmarshalStreamGet ();
    hr=widlUnmarshal (&ppdsaOxidBindings, pus, ndrtypes.refptr_t(ndrtypes.pointer_t(StructDesc_tagDUALSTRINGARRAY (ndrtypes)))); if (FAILED(hr)) return hr;
    hr=widlUnmarshal (&pipidRemUnknown, pus, ndrtypes.refptr_t(StructDesc__GUID (ndrtypes))); if (FAILED(hr)) return hr;
    hr=widlUnmarshal (&pAuthnHint, pus, ndrtypes.refptr_t(ndrtypes.ulong_t ())); if (FAILED(hr)) return hr;
    hr = widlUnmarshal (&hrMethod, pus, ndrtypes.hresult_t());
    if (FAILED(hr))
        return hr;
    return hrMethod;
    }

HRESULT STDMETHODCALLTYPE IOXIDResolver_ResolveOxid_vxstub (IOXIDResolver* pitf, RPC_STUB_MSG& msg)
    {
    NDRTYPES	ndrtypes;
    HRESULT	hr;
    HRESULT	hrMethod;
    NdrUnmarshalStream* pus = msg.unmarshalStreamGet ();
    OXID* pOxid;
    hr=widlUnmarshal (&pOxid, pus, ndrtypes.refptr_t(ndrtypes.hyper_t ())); if (FAILED(hr)) return hr;
    unsigned short cRequestedProtseqs;
    hr=widlUnmarshal (&cRequestedProtseqs, pus, ndrtypes.ushort_t ()); if (FAILED(hr)) return hr;
    unsigned short* arRequestedProtseqs;
    hr=widlUnmarshal (&arRequestedProtseqs, pus, ndrtypes.refptr_t(ndrtypes.carray_t(ndrtypes.ushort_t (), NDR_SIZEOF(unsigned short)))); if (FAILED(hr)) return hr;
    DUALSTRINGARRAY* ppdsaOxidBindings_tmp;
    DUALSTRINGARRAY** ppdsaOxidBindings = &ppdsaOxidBindings_tmp;
    IPID pipidRemUnknown_tmp;
    IPID* pipidRemUnknown = &pipidRemUnknown_tmp;
    DWORD pAuthnHint_tmp;
    DWORD* pAuthnHint = &pAuthnHint_tmp;
    hrMethod = ResolveOxid ((void*) msg.channelIdGet (), pOxid, cRequestedProtseqs, arRequestedProtseqs, ppdsaOxidBindings, pipidRemUnknown, pAuthnHint);

    NdrMarshalStream* pms = msg.marshalStreamGet ();
    hr=widlMarshal (&ppdsaOxidBindings, pms, ndrtypes.refptr_t(ndrtypes.pointer_t(StructDesc_tagDUALSTRINGARRAY (ndrtypes)))); if (FAILED(hr)) return hr;
    hr=widlMarshal (&pipidRemUnknown, pms, ndrtypes.refptr_t(StructDesc__GUID (ndrtypes))); if (FAILED(hr)) return hr;
    hr=widlMarshal (&pAuthnHint, pms, ndrtypes.refptr_t(ndrtypes.ulong_t ())); if (FAILED(hr)) return hr;
    hr = widlMarshal (&hrMethod, pms, ndrtypes.hresult_t());
    if (FAILED(hr))
        return hr;
    if ((*ppdsaOxidBindings)) {CoTaskMemFree ((*ppdsaOxidBindings));};
    return S_OK;
    }

HRESULT STDMETHODCALLTYPE IOXIDResolver_SimplePing_vxproxy (void* pvRpcChannel, SETID* pSetId)
    {
    RPC_PROXY_MSG	msg (IID_IOXIDResolver, RpcMode::DCE, 1, pvRpcChannel);
    NDRTYPES		ndrtypes;
    HRESULT		hrMethod;
    HRESULT		hr;

    NdrMarshalStream* pms = msg.marshalStreamGet ();
    hr=widlMarshal (&pSetId, pms, ndrtypes.refptr_t(ndrtypes.hyper_t ())); if (FAILED(hr)) return hr;
    hr = msg.SendReceive (); if (FAILED (hr)) return hr;
    NdrUnmarshalStream* pus = msg.unmarshalStreamGet ();
    hr = widlUnmarshal (&hrMethod, pus, ndrtypes.hresult_t());
    if (FAILED(hr))
        return hr;
    return hrMethod;
    }

HRESULT STDMETHODCALLTYPE IOXIDResolver_SimplePing_vxstub (IOXIDResolver* pitf, RPC_STUB_MSG& msg)
    {
    NDRTYPES	ndrtypes;
    HRESULT	hr;
    HRESULT	hrMethod;
    NdrUnmarshalStream* pus = msg.unmarshalStreamGet ();
    SETID* pSetId;
    hr=widlUnmarshal (&pSetId, pus, ndrtypes.refptr_t(ndrtypes.hyper_t ())); if (FAILED(hr)) return hr;
    hrMethod = SimplePing ((void*) msg.channelIdGet (), pSetId);

    NdrMarshalStream* pms = msg.marshalStreamGet ();
    hr = widlMarshal (&hrMethod, pms, ndrtypes.hresult_t());
    if (FAILED(hr))
        return hr;
    return S_OK;
    }

HRESULT STDMETHODCALLTYPE IOXIDResolver_ComplexPing_vxproxy (void* pvRpcChannel, SETID* pSetId, unsigned short SequenceNum, unsigned short cAddToSet, unsigned short cDelFromSet, OID* AddToSet, OID* DelFromSet, unsigned short* pPingBackoffFactor)
    {
    RPC_PROXY_MSG	msg (IID_IOXIDResolver, RpcMode::DCE, 2, pvRpcChannel);
    NDRTYPES		ndrtypes;
    HRESULT		hrMethod;
    HRESULT		hr;

    NdrMarshalStream* pms = msg.marshalStreamGet ();
    hr=widlMarshal (&pSetId, pms, ndrtypes.refptr_t(ndrtypes.hyper_t ())); if (FAILED(hr)) return hr;
    hr=widlMarshal (&SequenceNum, pms, ndrtypes.ushort_t ()); if (FAILED(hr)) return hr;
    hr=widlMarshal (&cAddToSet, pms, ndrtypes.ushort_t ()); if (FAILED(hr)) return hr;
    hr=widlMarshal (&cDelFromSet, pms, ndrtypes.ushort_t ()); if (FAILED(hr)) return hr;
    hr=widlMarshal (&AddToSet, pms, ndrtypes.pointer_t(ndrtypes.carray_t(ndrtypes.hyper_t (), NDR_SIZEOF(OID), cAddToSet))); if (FAILED(hr)) return hr;
    hr=widlMarshal (&DelFromSet, pms, ndrtypes.pointer_t(ndrtypes.carray_t(ndrtypes.hyper_t (), NDR_SIZEOF(OID), cDelFromSet))); if (FAILED(hr)) return hr;
    hr = msg.SendReceive (); if (FAILED (hr)) return hr;
    NdrUnmarshalStream* pus = msg.unmarshalStreamGet ();
    hr=widlUnmarshal (&pSetId, pus, ndrtypes.refptr_t(ndrtypes.hyper_t ())); if (FAILED(hr)) return hr;
    hr=widlUnmarshal (&pPingBackoffFactor, pus, ndrtypes.refptr_t(ndrtypes.ushort_t ())); if (FAILED(hr)) return hr;
    hr = widlUnmarshal (&hrMethod, pus, ndrtypes.hresult_t());
    if (FAILED(hr))
        return hr;
    return hrMethod;
    }

HRESULT STDMETHODCALLTYPE IOXIDResolver_ComplexPing_vxstub (IOXIDResolver* pitf, RPC_STUB_MSG& msg)
    {
    NDRTYPES	ndrtypes;
    HRESULT	hr;
    HRESULT	hrMethod;
    NdrUnmarshalStream* pus = msg.unmarshalStreamGet ();
    SETID pSetId_tmp;
    SETID* pSetId = &pSetId_tmp;
    hr=widlUnmarshal (&pSetId, pus, ndrtypes.refptr_t(ndrtypes.hyper_t ())); if (FAILED(hr)) return hr;
    unsigned short SequenceNum;
    hr=widlUnmarshal (&SequenceNum, pus, ndrtypes.ushort_t ()); if (FAILED(hr)) return hr;
    unsigned short cAddToSet;
    hr=widlUnmarshal (&cAddToSet, pus, ndrtypes.ushort_t ()); if (FAILED(hr)) return hr;
    unsigned short cDelFromSet;
    hr=widlUnmarshal (&cDelFromSet, pus, ndrtypes.ushort_t ()); if (FAILED(hr)) return hr;
    OID* AddToSet;
    hr=widlUnmarshal (&AddToSet, pus, ndrtypes.pointer_t(ndrtypes.carray_t(ndrtypes.hyper_t (), NDR_SIZEOF(OID)))); if (FAILED(hr)) return hr;
    OID* DelFromSet;
    hr=widlUnmarshal (&DelFromSet, pus, ndrtypes.pointer_t(ndrtypes.carray_t(ndrtypes.hyper_t (), NDR_SIZEOF(OID)))); if (FAILED(hr)) return hr;
    unsigned short pPingBackoffFactor_tmp;
    unsigned short* pPingBackoffFactor = &pPingBackoffFactor_tmp;
    hrMethod = ComplexPing ((void*) msg.channelIdGet (), pSetId, SequenceNum, cAddToSet, cDelFromSet, AddToSet, DelFromSet, pPingBackoffFactor);

    NdrMarshalStream* pms = msg.marshalStreamGet ();
    hr=widlMarshal (&pSetId, pms, ndrtypes.refptr_t(ndrtypes.hyper_t ())); if (FAILED(hr)) return hr;
    hr=widlMarshal (&pPingBackoffFactor, pms, ndrtypes.refptr_t(ndrtypes.ushort_t ())); if (FAILED(hr)) return hr;
    hr = widlMarshal (&hrMethod, pms, ndrtypes.hresult_t());
    if (FAILED(hr))
        return hr;
    return S_OK;
    }

HRESULT STDMETHODCALLTYPE IOXIDResolver_ServerAlive_vxproxy (void* pvRpcChannel)
    {
    RPC_PROXY_MSG	msg (IID_IOXIDResolver, RpcMode::DCE, 3, pvRpcChannel);
    NDRTYPES		ndrtypes;
    HRESULT		hrMethod;
    HRESULT		hr;

    hr = msg.SendReceive (); if (FAILED (hr)) return hr;
    NdrUnmarshalStream* pus = msg.unmarshalStreamGet ();
    hr = widlUnmarshal (&hrMethod, pus, ndrtypes.hresult_t());
    if (FAILED(hr))
        return hr;
    return hrMethod;
    }

HRESULT STDMETHODCALLTYPE IOXIDResolver_ServerAlive_vxstub (IOXIDResolver* pitf, RPC_STUB_MSG& msg)
    {
    NDRTYPES	ndrtypes;
    HRESULT	hr;
    HRESULT	hrMethod;
    hrMethod = ServerAlive ((void*) msg.channelIdGet ());

    NdrMarshalStream* pms = msg.marshalStreamGet ();
    hr = widlMarshal (&hrMethod, pms, ndrtypes.hresult_t());
    if (FAILED(hr))
        return hr;
    return S_OK;
    }

HRESULT STDMETHODCALLTYPE IOXIDResolver_ResolveOxid2_vxproxy (void* pvRpcChannel, OXID* pOxid, unsigned short cRequestedProtseqs, unsigned short* arRequestedProtseqs, DUALSTRINGARRAY** ppdsaOxidBindings, IPID* pipidRemUnknown, DWORD* pAuthnHint, COMVERSION* pComVersion)
    {
    RPC_PROXY_MSG	msg (IID_IOXIDResolver, RpcMode::DCE, 4, pvRpcChannel);
    NDRTYPES		ndrtypes;
    HRESULT		hrMethod;
    HRESULT		hr;

    NdrMarshalStream* pms = msg.marshalStreamGet ();
    hr=widlMarshal (&pOxid, pms, ndrtypes.refptr_t(ndrtypes.hyper_t ())); if (FAILED(hr)) return hr;
    hr=widlMarshal (&cRequestedProtseqs, pms, ndrtypes.ushort_t ()); if (FAILED(hr)) return hr;
    hr=widlMarshal (&arRequestedProtseqs, pms, ndrtypes.refptr_t(ndrtypes.carray_t(ndrtypes.ushort_t (), NDR_SIZEOF(unsigned short), cRequestedProtseqs))); if (FAILED(hr)) return hr;
    hr = msg.SendReceive (); if (FAILED (hr)) return hr;
    NdrUnmarshalStream* pus = msg.unmarshalStreamGet ();
    hr=widlUnmarshal (&ppdsaOxidBindings, pus, ndrtypes.refptr_t(ndrtypes.pointer_t(StructDesc_tagDUALSTRINGARRAY (ndrtypes)))); if (FAILED(hr)) return hr;
    hr=widlUnmarshal (&pipidRemUnknown, pus, ndrtypes.refptr_t(StructDesc__GUID (ndrtypes))); if (FAILED(hr)) return hr;
    hr=widlUnmarshal (&pAuthnHint, pus, ndrtypes.refptr_t(ndrtypes.ulong_t ())); if (FAILED(hr)) return hr;
    hr=widlUnmarshal (&pComVersion, pus, ndrtypes.refptr_t(StructDesc_tagCOMVERSION (ndrtypes))); if (FAILED(hr)) return hr;
    hr = widlUnmarshal (&hrMethod, pus, ndrtypes.hresult_t());
    if (FAILED(hr))
        return hr;
    return hrMethod;
    }

HRESULT STDMETHODCALLTYPE IOXIDResolver_ResolveOxid2_vxstub (IOXIDResolver* pitf, RPC_STUB_MSG& msg)
    {
    NDRTYPES	ndrtypes;
    HRESULT	hr;
    HRESULT	hrMethod;
    NdrUnmarshalStream* pus = msg.unmarshalStreamGet ();
    OXID* pOxid;
    hr=widlUnmarshal (&pOxid, pus, ndrtypes.refptr_t(ndrtypes.hyper_t ())); if (FAILED(hr)) return hr;
    unsigned short cRequestedProtseqs;
    hr=widlUnmarshal (&cRequestedProtseqs, pus, ndrtypes.ushort_t ()); if (FAILED(hr)) return hr;
    unsigned short* arRequestedProtseqs;
    hr=widlUnmarshal (&arRequestedProtseqs, pus, ndrtypes.refptr_t(ndrtypes.carray_t(ndrtypes.ushort_t (), NDR_SIZEOF(unsigned short)))); if (FAILED(hr)) return hr;
    DUALSTRINGARRAY* ppdsaOxidBindings_tmp;
    DUALSTRINGARRAY** ppdsaOxidBindings = &ppdsaOxidBindings_tmp;
    IPID pipidRemUnknown_tmp;
    IPID* pipidRemUnknown = &pipidRemUnknown_tmp;
    DWORD pAuthnHint_tmp;
    DWORD* pAuthnHint = &pAuthnHint_tmp;
    COMVERSION pComVersion_tmp;
    COMVERSION* pComVersion = &pComVersion_tmp;
    hrMethod = ResolveOxid2 ((void*) msg.channelIdGet (), pOxid, cRequestedProtseqs, arRequestedProtseqs, ppdsaOxidBindings, pipidRemUnknown, pAuthnHint, pComVersion);

    NdrMarshalStream* pms = msg.marshalStreamGet ();
    hr=widlMarshal (&ppdsaOxidBindings, pms, ndrtypes.refptr_t(ndrtypes.pointer_t(StructDesc_tagDUALSTRINGARRAY (ndrtypes)))); if (FAILED(hr)) return hr;
    hr=widlMarshal (&pipidRemUnknown, pms, ndrtypes.refptr_t(StructDesc__GUID (ndrtypes))); if (FAILED(hr)) return hr;
    hr=widlMarshal (&pAuthnHint, pms, ndrtypes.refptr_t(ndrtypes.ulong_t ())); if (FAILED(hr)) return hr;
    hr=widlMarshal (&pComVersion, pms, ndrtypes.refptr_t(StructDesc_tagCOMVERSION (ndrtypes))); if (FAILED(hr)) return hr;
    hr = widlMarshal (&hrMethod, pms, ndrtypes.hresult_t());
    if (FAILED(hr))
        return hr;
    if ((*ppdsaOxidBindings)) {CoTaskMemFree ((*ppdsaOxidBindings));};
    return S_OK;
    }

const PFN_ORPC_STUB stub_functbl_IOXIDResolver [] =
    {
    (PFN_ORPC_STUB) IOXIDResolver_ResolveOxid_vxstub,
    (PFN_ORPC_STUB) IOXIDResolver_SimplePing_vxstub,
    (PFN_ORPC_STUB) IOXIDResolver_ComplexPing_vxstub,
    (PFN_ORPC_STUB) IOXIDResolver_ServerAlive_vxstub,
    (PFN_ORPC_STUB) IOXIDResolver_ResolveOxid2_vxstub,
    };

EXTERN_C const VXDCOM_STUB_DISPTBL IOXIDResolver_vxstub_disptbl =
    {
    5,
    stub_functbl_IOXIDResolver
    };

HRESULT STDMETHODCALLTYPE ISystemActivator_ADummyMethod_vxproxy (void* pvRpcChannel)
    {
    RPC_PROXY_MSG	msg (IID_ISystemActivator, RpcMode::DCE, 0, pvRpcChannel);
    NDRTYPES		ndrtypes;
    HRESULT		hrMethod;
    HRESULT		hr;

    hr = msg.SendReceive (); if (FAILED (hr)) return hr;
    NdrUnmarshalStream* pus = msg.unmarshalStreamGet ();
    hr = widlUnmarshal (&hrMethod, pus, ndrtypes.hresult_t());
    if (FAILED(hr))
        return hr;
    return hrMethod;
    }

HRESULT STDMETHODCALLTYPE ISystemActivator_ADummyMethod_vxstub (ISystemActivator* pitf, RPC_STUB_MSG& msg)
    {
    NDRTYPES	ndrtypes;
    HRESULT	hr;
    HRESULT	hrMethod;
    hrMethod = ADummyMethod ((void*) msg.channelIdGet ());

    NdrMarshalStream* pms = msg.marshalStreamGet ();
    hr = widlMarshal (&hrMethod, pms, ndrtypes.hresult_t());
    if (FAILED(hr))
        return hr;
    return S_OK;
    }

const PFN_ORPC_STUB stub_functbl_ISystemActivator [] =
    {
    (PFN_ORPC_STUB) ISystemActivator_ADummyMethod_vxstub,
    };

EXTERN_C const VXDCOM_STUB_DISPTBL ISystemActivator_vxstub_disptbl =
    {
    1,
    stub_functbl_ISystemActivator
    };



